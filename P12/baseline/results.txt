====================
HOMEWORK P12 RESULTS
====================

Spring 2023

NOTE: We will not be grading for "correct" answers, since your results may vary, but rather answers that are consistent with your measured results.

IMPORTANT: If at all possible, time your program on a machine with at least 4 cores. (CSE VM may be configured to use multiple cores in the VirtualBox properties panel.)

FULL CREDIT
===========

QUESTION 1: Which puzzle did you use as ThreadsOfSudoku's parameter to achieve a 30+ second runtime (using "real"):

14_zeros 

QUESTION 2: Provide the full ``time`` output for your program, with 1 to 16 threads. It may prove interesting to screenshot your system monitor while these run. You may be able to run all of these with a single bash command if you like (replace 14_zeros with your puzzle from QUESTION 1): 

for i in {1..16} ; do printf "\n Threads %d:\n" $i ; time (java ThreadsOfSudoku $i puzzle.txt 14_zeros > temp.txt) ; done

Example Timing (first 2 of 16 runs only on Antares):

ricegf@antares$ for i in {1..16} ; do printf "\n Threads %d:\n" $i ; time (java ThreadsOfSudoku $i puzzle.txt 14_zeros > temp.txt) ; done

 Threads 1:

real	2m0.684s
user	2m0.919s
sys	0m0.292s

 Threads 2:

real	1m4.553s
user	2m7.003s
sys	0m0.252s

YOUR Timing:
 Threads 1:

real 3m8.651s
user 3m8.834s
sys  0m0.324s

Threads 2:

real 1m32.591s
user 1m33.362s
sys  0m0.193s

Threads 3:

real 1m3.882s
user 1m4.134s
sys  0m0.190s

Threads 4:

real 0m55.342s
user 0m55.532s
sys  0m0.187s

Threads 5:

real 0m48.735s
user 0m48.833s
sys  0m0.183s

Threads 6:

real 0m45.732s
user 0m45.852s
sys  0m0.181s

Threads 7:

real 0m43.342s
user 0m43.534s
sys  0m0.178s

Threads 8:

real 0m40.843s
user 0m40.964s
sys  0m0.177s

Threads 9:

real 0m37.548s
user 0m37.835s
sys  0m0.174s

Threads 10:

real 0m36.294s
user 0m36.432s
sys  0m0.174s

Threads 11:

real 0m35.435s
user 0m35.636s
sys  0m0.173s

Threads 12:

real 0m34.935s
user 0m35.025s
sys  0m0.187s

Threads 13:

real 0m33.725s
user 0m33.854s
sys  0m0.187s

Threads 14:

real 0m33.342s
user 0m33.532s
sys  0m0.187s

Threads 15:

real 0m32.776s
user 0m33.053s
sys  0m0.187s

 Threads 16:

real 0m32.872s
user 0m33.142s
sys  0m0.142s


QUESTION 3: Does adding more threads continue to speed up the program? Do more threads ever slow down the program slightly?  Why or why not?

Yes, the program is being processed through more threads.
Maybe, depending on the system, it can slowdown ie overheat.


QUESTION 4: Does adding more threads increase the "system load", or is it constant regardless of the number of threads?  Why?

No, because the work is being spread throughout the threads. The more threads the less work for each thread.


BONUS
=====

QUESTION 5: Time your thread pool version of ThreadsOfSudoku as you did for the full credit version. Post your timings here.

YOUR Timing:






QUESTION 6: Is a thread pool faster, slower, or roughly equivalent in performance? 



QUESTION 7: Compare the full credit and bonus solution code. Which do you believe is more supportable over a long lifetime of evolving hardware and environments?


